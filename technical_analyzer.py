import pandas as pd
import numpy as np
import logging
from datetime import datetime, timedelta
import talib
from data_collector import DataCollector

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('technical_analyzer.log', mode='w'),
        logging.StreamHandler()
    ]
)

class TechnicalAnalyzer:
    def __init__(self, data_collector):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
        Args:
            data_collector (DataCollector): –û–±—ä–µ–∫—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        """
        self.logger = logging.getLogger(__name__)
        self.data_collector = data_collector
        self.logger.info("TechnicalAnalyzer —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def calculate_indicators(self, df):
        """
        –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        
        Args:
            df (pd.DataFrame): DataFrame —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            
        Returns:
            pd.DataFrame: DataFrame —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """
        try:
            # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
            df['SMA_20'] = df['close'].rolling(window=20).mean()
            df['SMA_50'] = df['close'].rolling(window=50).mean()
            df['SMA_200'] = df['close'].rolling(window=200).mean()
            
            # EMA –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
            df['EMA_12'] = df['close'].ewm(span=12, adjust=False).mean()
            df['EMA_26'] = df['close'].ewm(span=26, adjust=False).mean()
            
            # RSI
            delta = df['close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            df['RSI'] = 100 - (100 / (1 + rs))
            
            # MACD
            df['MACD'] = df['EMA_12'] - df['EMA_26']
            df['Signal_Line'] = df['MACD'].ewm(span=9, adjust=False).mean()
            df['MACD_Hist'] = df['MACD'] - df['Signal_Line']
            
            # Bollinger Bands
            df['BB_middle'] = df['close'].rolling(window=20).mean()
            df['BB_std'] = df['close'].rolling(window=20).std()
            df['BB_upper'] = df['BB_middle'] + (df['BB_std'] * 2)
            df['BB_lower'] = df['BB_middle'] - (df['BB_std'] * 2)
            
            # Stochastic Oscillator
            low_14 = df['low'].rolling(window=14).min()
            high_14 = df['high'].rolling(window=14).max()
            df['%K'] = 100 * ((df['close'] - low_14) / (high_14 - low_14))
            df['%D'] = df['%K'].rolling(window=3).mean()
            
            # ATR –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            df['TR'] = pd.DataFrame({
                'HL': df['high'] - df['low'],
                'HC': abs(df['high'] - df['close'].shift(1)),
                'LC': abs(df['low'] - df['close'].shift(1))
            }).max(axis=1)
            df['ATR'] = df['TR'].rolling(window=14).mean()
            
            # –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            df['Volume_SMA'] = df['volume'].rolling(window=20).mean()
            df['Volume_Ratio'] = df['volume'] / df['Volume_SMA']
            
            return df
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {str(e)}")
            return None

    def analyze_symbol(self, symbol):
        """
        –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
        
        Args:
            symbol (str): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            self.logger.info(f"–ê–Ω–∞–ª–∏–∑ {symbol}...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            df = self.data_collector.get_historical_data(symbol)
            if df is None or len(df) < 200:
                self.logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}")
                return None
                
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            df = self.calculate_indicators(df)
            if df is None:
                return None
                
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            current_price = df['close'].iloc[-1]
            sma_20 = df['SMA_20'].iloc[-1]
            sma_50 = df['SMA_50'].iloc[-1]
            sma_200 = df['SMA_200'].iloc[-1]
            rsi = df['RSI'].iloc[-1]
            macd = df['MACD'].iloc[-1]
            signal = df['Signal_Line'].iloc[-1]
            macd_hist = df['MACD_Hist'].iloc[-1]
            stoch_k = df['%K'].iloc[-1]
            stoch_d = df['%D'].iloc[-1]
            bb_upper = df['BB_upper'].iloc[-1]
            bb_lower = df['BB_lower'].iloc[-1]
            volume_ratio = df['Volume_Ratio'].iloc[-1]
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            trend_strength = 0
            if current_price > sma_20 > sma_50 > sma_200:
                trend = '–í–û–°–•–û–î–Ø–©–ò–ô'
                trend_strength += 1
            elif current_price < sma_20 < sma_50 < sma_200:
                trend = '–ù–ò–°–•–û–î–Ø–©–ò–ô'
                trend_strength -= 1
            else:
                trend = '–ë–û–ö–û–í–û–ô'
                
            # –ê–Ω–∞–ª–∏–∑ RSI
            if rsi > 70:
                rsi_signal = '–ü–ï–†–ï–ü–†–û–î–ê–ù–û'
                trend_strength -= 1
            elif rsi < 30:
                rsi_signal = '–ü–ï–†–ï–ö–£–ü–õ–ï–ù–û'
                trend_strength += 1
            else:
                rsi_signal = '–ù–ï–ô–¢–†–ê–õ–¨–ù–û'
                
            # –ê–Ω–∞–ª–∏–∑ MACD
            if macd > signal and macd_hist > 0:
                macd_signal = '–†–û–°–¢'
                trend_strength += 1
            elif macd < signal and macd_hist < 0:
                macd_signal = '–ü–ê–î–ï–ù–ò–ï'
                trend_strength -= 1
            else:
                macd_signal = '–ù–ï–ô–¢–†–ê–õ–¨–ù–û'
                
            # –ê–Ω–∞–ª–∏–∑ Stochastic
            if stoch_k > 80 and stoch_d > 80:
                stoch_signal = '–ü–ï–†–ï–ü–†–û–î–ê–ù–û'
                trend_strength -= 1
            elif stoch_k < 20 and stoch_d < 20:
                stoch_signal = '–ü–ï–†–ï–ö–£–ü–õ–ï–ù–û'
                trend_strength += 1
            else:
                stoch_signal = '–ù–ï–ô–¢–†–ê–õ–¨–ù–û'
                
            # –ê–Ω–∞–ª–∏–∑ Bollinger Bands
            if current_price > bb_upper:
                bb_signal = '–ü–ï–†–ï–ü–†–û–î–ê–ù–û'
                trend_strength -= 1
            elif current_price < bb_lower:
                bb_signal = '–ü–ï–†–ï–ö–£–ü–õ–ï–ù–û'
                trend_strength += 1
            else:
                bb_signal = '–ù–ï–ô–¢–†–ê–õ–¨–ù–û'
                
            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
            if volume_ratio > 1.5:
                volume_signal = '–í–´–°–û–ö–ò–ô'
                trend_strength *= 1.2
            elif volume_ratio < 0.5:
                volume_signal = '–ù–ò–ó–ö–ò–ô'
                trend_strength *= 0.8
            else:
                volume_signal = '–ù–û–†–ú–ê–õ–¨–ù–´–ô'
                
            # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence = min(abs(trend_strength) / 4, 0.95)  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ 0.95
            
            self.logger.info(f"–ê–Ω–∞–ª–∏–∑ {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            return {
                'trend': trend,
                'rsi': rsi,
                'rsi_signal': rsi_signal,
                'macd': macd,
                'macd_signal': macd_signal,
                'stoch_k': stoch_k,
                'stoch_d': stoch_d,
                'stoch_signal': stoch_signal,
                'bb_signal': bb_signal,
                'volume_signal': volume_signal,
                'confidence': confidence
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {str(e)}")
            return None

    def format_analysis(self, analysis):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
        
        :param analysis: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        if analysis is None:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            
        output = []
        output.append(f"üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
        output.append(f"üìà –¢—Ä–µ–Ω–¥: {analysis['trend']}")
        
        output.append("\nüìä RSI:")
        output.append(f"–ó–Ω–∞—á–µ–Ω–∏–µ: {analysis['rsi']:.2f}")
        output.append(f"–°–∏–≥–Ω–∞–ª: {analysis['rsi_signal']}")
        
        output.append("\nüìä MACD:")
        output.append(f"–ó–Ω–∞—á–µ–Ω–∏–µ: {analysis['macd']:.2f}")
        output.append(f"–°–∏–≥–Ω–∞–ª: {analysis['macd_signal']}")
        
        output.append("\nüìä Stochastic:")
        output.append(f"%K: {analysis['stoch_k']:.2f}")
        output.append(f"%D: {analysis['stoch_d']:.2f}")
        output.append(f"–°–∏–≥–Ω–∞–ª: {analysis['stoch_signal']}")
        
        output.append("\nüìä Bollinger Bands:")
        output.append(f"–°–∏–≥–Ω–∞–ª: {analysis['bb_signal']}")
        
        output.append("\nüìä –û–±—ä–µ–º:")
        output.append(f"–°–∏–≥–Ω–∞–ª: {analysis['volume_signal']}")
        
        output.append(f"\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis['confidence']:.2f}")
        return "\n".join(output)

def test_technical_analyzer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TechnicalAnalyzer"""
    try:
        logging.info("–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TechnicalAnalyzer")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        collector = DataCollector(test_mode=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        analyzer = TechnicalAnalyzer(collector)
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ BTC/USDT
        logging.info("\n–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ BTC/USDT")
        analysis = analyzer.analyze_symbol('BTC/USDT')
        if analysis is not None:
            print(analyzer.format_analysis(analysis))
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        raise

if __name__ == "__main__":
    test_technical_analyzer() 